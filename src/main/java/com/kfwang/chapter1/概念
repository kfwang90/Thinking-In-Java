

1.对象导论：
1.1 抽象过程
    JAVA的五个基本特性：
        1).万物皆为对象。
        2).程序是对象的集合，他们通过发送消息来告知彼此所要做的。
        3).每个对象都有自己的由其他对象所构成的存储。
        4).每个对象都拥有其类型。
        5).某一特定类型的所有对象都可以接收同样的消息。
            圆形类型的对象也是几何形类型的对象。
1.2 每个对象都有一个接口
    1).所有的对象都是唯一的，但同时也是具有相同的特性和行为的对象所归属的类的一部分。
    2).第一个面向对象语言，Simula-67。
    3).每个对象都只能满足某些请求，这些请求由对象的接口所定义，决定接口的便是类型。
    Light{
        on()
        off()
        brighten()
        dim()
    }
    4).接口确定了对某一特定对象所能发出的请求。但是，在程序中必须有满足这些请求的代码。这些代码与隐藏的数据一起构成了实现。
1.3 每个对象都提供服务
    1).将对象看作是服务的提供者，它有助于提高对象的内聚性。高内聚是软件设计的基本质量要求之一。

1.4 被隐藏的具体实现
    1).被隐藏的部分通常代表对象内部脆弱的部分，它们很容易被粗心的或不知内情的客户端程序员所毁坏，因此将实现隐藏起来可以减少程序bug。
    2).访问控制存在的第一个原因就是让客户端程序员无法触及他们不应该触及的部分。第二个存在原因就是允许库设计者可以改变内部的工作方式而不用担心
    会影响到客户端程序员。
    3).Java三个关键字设定类的访问边界：private public protected
        public表示紧随其后的元素对任何人都是可用的。
        private表示除类型创建者和类型内部方法之外的任何人都不能访问的元素。
        protected与private作用相当，差别在于继承的类可以访问protected成员。

1.5 复用具体实现
    1).代码复用是面向对象程序设计所提供的最了不起的优点之一。
    2).使用现有类合成新的类，这种概念成为组合。如果组合是动态发生的，成为聚合。组合经常被成为has-a关系，就像汽车拥有引擎一样。

1.6 继承
    1).继承使用基类型和导出类型的概念表示了多个类型之间的相似性。一个基类型包含其所有导出类型所共享的特性和行为。可以创建一个基类型来表示系统中
    某些对象的核心概念，从基类型中导出其他类型，来表示此核心可以被实现的各种不同方式。以下以几何类型为例：
    Shape{
        draw()
        erase()
        move()
        getColor()
        setColor()
    }

    Circle,Square,Triangle extends Shape
    2).当继承现有类型时，也就创造了新的类型。这个新的类型不仅包含现有类型的所有成员，而且更重要的是它复制了基类的接口。
    3).当基类的方法不能满足导出类的需求时,第一种方法：可以在导出类中新增方法。第二种方法：改变现有基类的方法，即覆盖（override）。
        Triangle extends Shape{
            FlipVertical()
            FlipHorizontal()
        }

1.7 伴随多态的可互换对象
    1).在处理类型的层次结构时，经常想把一个对象不当做它所属的特定类型来对待，而是将其当做基类的对象来对待。即泛化对象。
    2).面向对象程序设计语言使用后期绑定的概念。当向对象发送消息时，被调用的代码直到运行时才能确定。编译器确保被调用方法的存在，并对调用
    方法的存在，并对调用参数和返回值执行类型检查，但是并不知道将被执行的确切代码。C++中使用关键字virtual实现后期绑定，而Java中，动态绑定
    是默认行为，不需要添加额外的关键字来实现多态。
    void doSomeThing(Shape shape){
        shape.erase();
        shape.draw();
    }
    {
        Circle circle = new Circle();
        Triangle triangle = new Triangle();
        doSomething(circle);
        doSomething(triangle);
    }
    例子中：对doSomething()的调用会自动正确的处理，而不管对象的确切类型。
    3).将导出类看做是它的基类的过程称为向上转型。

1.8 单根继承结构
    1).Java中的终极基类为Object.
    2).单根继承结构保证所有对象都具备某些功能。
    3).单根继承结构使垃圾回收器的实现变得容易的多，而垃圾回收器正是Java相对于C++的重要改进之一。

1.9 容器
    1).程序设计时，容器是在任何需要时都可以扩充自己以容纳你置于其中的所有东西。它持有对其他对象的引用。
    2).Java的容器如List Map Set,队列 树 堆栈等；
        2.1).不同容器提供不同类型的接口和外部行为。
        2.2).不同的容器对于某些操作具有不同的效率。例如ArrayList和LinkedList，它们都是具有相同接口和外部行为的简单的序列，但是它们
            对某些操作所花费的代价却有天壤之别。在ArrayList里面随机访问元素是一个花费固定时间的操作。但是对于LinkedList来说，访问越
            靠近表尾花费的时间越长。
    3).参数化类型，Java5的重大变化就是增加了参数化类型，在Java中它成为泛型。
        List<Shape> shapes = new ArrayList<Shape>();

1.10 对象的创建和生命期
    1).如何知道何时销毁对象？
        对象存储的两种方式：
            C++中对象的存储空间和生命周期可以在编写程序时确定，这可以通过将对象置于堆栈或静态存储区域内来实现。
            Java在堆(heap)的内存池中动态的创建对象。直到程序运行时才知道需要多少对象，它们的生命周期如何，以及它们的基本类型是什么。
    2).Java完全采用了动态内存分配的方式。每当想要创建新对象时，就要使用new关键字构建此对象的动态实例。
    3).C++必须通过编程方式来确定何时销毁对象。Java提供了被成为垃圾回收器的机制，它可以自动发现对象何时不再被使用，并销毁它。

1.11 异常处理
    1).异常处理不是面向对象的特征。异常处理在面向对象语言之前就已经存在了。

1.12.并发编程
    1).多线程并发时注意使用资源锁。





